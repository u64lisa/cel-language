package "test";

#main Test;
#optimize;

// local import
//import "test.TestImport";

// internal std import
//import "std::concurrent::list";

macro owo (
  { $A:ty, $B:ty } => { ($A, $B) };
);

class OwO {

    method static mow() {
        println("MOW");
    }

}

class MethodHolder {

    method static printTest(test) -> any {
        println(test);
        println("Test what is this owo");

        return 69;
    }

    method static testMemory() -> any {
        let myValue = 400;

        let address = MEM_alloc(8);
        let address2 = MEM_alloc(8);

        MEM_putInt(address, myValue);

        MEM_copy(address, address2);

        let readVar = MEM_getInt(address);
        let readVar2 = MEM_getInt(address2);
        println("read value from memory: " + readVar);
        println("read value from memory (copy): " + readVar2);

        MEM_free(address);
        MEM_free(address2);

        OwO.mow();

        return 60;
    }

}



class Test {

    method static main(args: any) {

        var start = epoch();

        println("TEST");

        println("OwO");

        var test = "local";

        println(test + " what is this");

        if (test == "local") {
            println("owo what this i like");
        } else {
            println(`its not qwq`);
        }

        assert args != null;

        println("Arguments: " + str(args));

        var calc = 0;
        for (i -> 0:10) {
            calc++;
        }

        if (calc > 5) {
            println("Calculated is bigger than 5");
        } else {
            println("Calculated is not bigger than 5");
        }

        switch (calc) {
            case 1: pass;
            case 3: pass;
            case 5: pass;
            case 7: pass;
            case 9:
                println("Odd number!");
                break;
            // Fall through makes it so that all the cases up until case 9 execute this code.

            case 2: pass;
            case 4: pass;
            case 6: pass;
            case 8:
                println("Even number!");
                break;

            default:
                println("Unhandled number...");
            // This will execute if the number is not in any of the above cases.
        };

        println("Calculated String: " + str(calc));

        var returnType = MethodHolder.printTest("Method parameter");
        MethodHolder.testMemory();

        println("Method returns: " + returnType);

        var time = |f64| (epoch() - start);

        println(str(time) + " ms");
    }

}
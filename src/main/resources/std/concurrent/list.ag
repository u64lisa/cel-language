import "std::concurrent::iterator";

class List {

    private internal: list;

    ingredients(..elements)<T> {
        attribute internal = [];

        for (element <- elements) append(internal, element);
    }

    method bin type => "List";

    method remove(item: T) -> any {
        remove(internal, item);
    }

    method size => size(internal);

    method bin equals(other) -> bool {
        if (type(other) != type(this))
            return false;

        list(this) == list(other)
    }

    method bin remove(item: T) {
        remove(internal, item);
    }

    method bin pop(index: int) -> T {
        let item = |T| internal[index];

        remove(internal, item);

        return item;
    }

    method iterate {
        return Iterator(internal);
    }

    method bin get(index: int) -> T {
        internal[index];
    }

    method add(item: T) -> void {
        append(internal, &item);
    }

    method addAll(..items) -> void {
        for (item <- items) append(internal, item);
    }

    method bin list => internal;

    method contains(x) -> bool {
        return contains(internal, x);
    }

    method indexOf(item: T) -> int {
        return indexOf(internal, &item);
    }

    method slice(minC: int, maxC: int) {
        let result = sublist(internal, minC, maxC);

        List(..result)<T>
    }

    method destruct {
        destructor this;
    }

}
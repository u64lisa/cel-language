package language.backend.compiler.bytecode;

public interface OpCode {

    int Return =                0x00;
    int Constant =              0x01;
    int Negate =                0x02;
    int Increment =             0x03;
    int Decrement =             0x04;
    int Add =                   0x05;
    int Subtract =              0x06;
    int Multiply =              0x07;
    int Divide =                0x08;
    int Modulo =                0x09;
    int Power =                 0x0A;
    int EQUAL =                 0x0B;
    int LessThan =              0x0C;
    int GreaterThan =           0x0D;
    int Not =                   0x0E;
    int Pop =                   0x0F;
    int SetGlobal =             0x10;
    int DefineGlobal =          0x11;
    int GetGlobal =             0x12;
    int GetLocal =              0x13;
    int SetLocal =              0x14;
    int Jump =                  0x16;
    int JumpIfFalse =           0x17;
    int JumpIfTrue =            0x18;
    int Loop =                  0x19;
    int For =                   0x1A;
    int StartCache =            0x1B;
    int CollectLoop =           0x1C;
    int FlushLoop =             0x1D;
    int DefineLocal =           0x1E;
    int Pattern =               0x1F;
    int Call =                  0x20;
    int Closure =               0x21;
    int GetUpvalue =            0x22;
    int SetUpvalue =            0x23;
    int MakeArray =             0x24;
    int MakeMap =               0x25;
    int Class =                 0x26;
    int Access =                0x27;
    int Method =                0x28;
    int MakeVar =               0x29;
    int SetAttr =               0x2A;
    int GetAttr =               0x2B;
    int Index =                 0x2C;
    int Get =                   0x2D;
    int Null =                  0x2E;
    int Assert =                0x2F;
    int Throw =                 0x30;
    int Import =                0x31;
    int Enum =                  0x32;
    int BitAnd =                0x33;
    int BitOr =                 0x34;
    int BitXor =                0x35;
    int BitCompl =              0x36;
    int LeftShift =             0x37;
    int RightShift =            0x38;
    int SignRightShift =        0x39;
    int Copy =                  0x3A;
    int Iter =                  0x3B;
    int Spread =                0x3C;
    int Ref =                   0x3D;
    int Deref =                 0x3E;
    int SetRef =                0x3F;
    int ToBytes =               0x40;
    int FromBytes =             0x41;
    int Chain =                 0x43;
    int DropLocal =             0x44;
    int DropGlobal =            0x45;
    int DropUpvalue =           0x46;
    int Header =                0x47;
    int Destruct =              0x48;
    int PatternVars =           0x49;
    int TypeDef =               0x4A;

}                                                   
